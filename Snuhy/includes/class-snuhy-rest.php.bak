<?php
if (!defined('ABSPATH')) { exit; }

class Snuhy_Rest {

    const NS = 'snuhy/v1';

    public function init(){
        add_action('rest_api_init', [$this,'register_routes']);
    }

    public function register_routes(){
        register_rest_route(self::NS, '/links', [
            'methods'  => WP_REST_Server::READABLE,
            'callback' => [$this,'links_get'],
            'permission_callback' => function(){ return current_user_can('manage_options'); },
        ]);

        register_rest_route(self::NS, '/links', [
            'methods'  => WP_REST_Server::CREATABLE,
            'callback' => [$this,'links_post'],
            'permission_callback' => function(){ return current_user_can('manage_options'); },
            'args' => [
                'keyword'    => [ 'required' => true ],
                'target_url' => [ 'required' => true ],
            ],
        ]);

        register_rest_route(self::NS, '/links/(?P<id>\d+)', [
            'methods'  => WP_REST_Server::DELETABLE,
            'callback' => [$this,'links_delete'],
            'permission_callback' => function(){ return current_user_can('manage_options'); },
        ]);

        register_rest_route(self::NS, '/links/export', [
            'methods'  => WP_REST_Server::READABLE,
            'callback' => [$this,'links_export'],
            'permission_callback' => function(){ return current_user_can('manage_options'); },
        ]);
    }

    // ========== Storage helpers (wp_options) ==========
    private function get_links(){
        $links = get_option('snuhy_links', []);
        if (!is_array($links)) $links = [];
        // normalize
        foreach ($links as &$r){
            $r = wp_parse_args($r, [
                'id' => 0,
                'keyword' => '',
                'target_url' => '',
                'type' => 'internal',
                'rel' => '',
                'enabled' => 1,
            ]);
        }
        return $links;
    }
    private function save_links($links){
        update_option('snuhy_links', array_values($links));
    }
    private function next_id($links){
        $max = 0;
        foreach ($links as $r){ if (!empty($r['id']) && $r['id']>$max) $max = intval($r['id']); }
        return $max+1;
    }

    // ========== Endpoints ==========
    public function links_get(WP_REST_Request $req){
        return rest_ensure_response( $this->get_links() );
    }

    public function links_post(WP_REST_Request $req){
        $body = $req->get_json_params();
        $keyword    = isset($body['keyword']) ? sanitize_text_field($body['keyword']) : '';
        $target_url = isset($body['target_url']) ? esc_url_raw($body['target_url']) : '';
        $type       = isset($body['type']) ? sanitize_text_field($body['type']) : 'internal';
        $rel        = isset($body['rel']) ? sanitize_text_field($body['rel']) : '';
        $enabled    = isset($body['enabled']) ? intval($body['enabled']) : 1;

        if ($keyword === '' || $target_url === '') {
            return new WP_Error('snuhy_bad_params', __('Keyword and Target URL are required.','snuhy'), ['status'=>400]);
        }

        $links = $this->get_links();
        $id = $this->next_id($links);

        // إذا النوع "auto" حدده اعتمادًا على الدومين
        if ($type === 'auto') {
            $host_home = parse_url(home_url(), PHP_URL_HOST);
            $host_tgt  = parse_url($target_url, PHP_URL_HOST);
            $type = ($host_tgt && $host_home && strtolower($host_home)!==strtolower($host_tgt)) ? 'external' : 'internal';
        }

        $links[] = [
            'id'         => $id,
            'keyword'    => $keyword,
            'target_url' => $target_url,
            'type'       => in_array($type, ['internal','external','aff'], true) ? $type : 'internal',
            'rel'        => $rel,
            'enabled'    => $enabled ? 1 : 0,
        ];

        $this->save_links($links);
        return rest_ensure_response(['ok'=>true,'id'=>$id]);
    }

    public function links_delete(WP_REST_Request $req){
        $id = intval($req['id']);
        $links = $this->get_links();
        $new = [];
        $found = false;
        foreach ($links as $r){
            if (intval($r['id']) === $id){ $found = true; continue; }
            $new[] = $r;
        }
        if (!$found){
            return new WP_Error('snuhy_not_found', __('Link not found.','snuhy'), ['status'=>404]);
        }
        $this->save_links($new);
        return rest_ensure_response(['ok'=>true]);
    }

    public function links_export(WP_REST_Request $req){
        // رجّع JSON بسيط (لو حبيت CSV لاحقًا)
        $links = $this->get_links();
        return rest_ensure_response($links);
    }
}
